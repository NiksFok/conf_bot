#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–ª–æ–≤.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ —É—á–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
"""

from typing import Dict, List, Optional, Any
import datetime
from utils.db_connector import DBConnector

class PointsSystem:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –±–∞–ª–ª–æ–≤."""
    
    # –¢–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —ç–º–æ–¥–∑–∏
    TRANSACTION_TYPES = {
        'earn': '‚¨ÜÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ',
        'spend': '‚¨áÔ∏è –°–ø–∏—Å–∞–Ω–∏–µ'
    }
    
    # –ü—Ä–∏—á–∏–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —ç–º–æ–¥–∑–∏
    TRANSACTION_REASONS = {
        'stand_visit': 'üè¢ –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞',
        'merch_order': 'üõçÔ∏è –ó–∞–∫–∞–∑ –º–µ—Ä—á–∞',
        'workshop_attendance': 'üìö –ü–æ—Å–µ—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞',
        'registration': '‚ú® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'admin_adjustment': 'üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
        'other': 'üìã –î—Ä—É–≥–æ–µ'
    }
    
    def __init__(self, db: DBConnector):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–ª–æ–≤."""
        self.db = db
    
    def add_points(self, user_id: int, amount: int, reason: str, reference_id: str = None) -> bool:
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        if amount <= 0:
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.db.update_user_points(user_id, amount):
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_data = {
            'user_id': user_id,
            'amount': amount,
            'type': 'earn',
            'reason': reason,
            'reference_id': reference_id,
            'created_at': datetime.datetime.utcnow()
        }
        
        self.db.create_points_transaction(transaction_data)
        return True
    
    def subtract_points(self, user_id: int, amount: int, reason: str, reference_id: str = None) -> bool:
        """–°–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if amount <= 0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.db.get_user(user_id)
        if not user or user.get('points', 0) < amount:
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.db.update_user_points(user_id, -amount):
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_data = {
            'user_id': user_id,
            'amount': amount,
            'type': 'spend',
            'reason': reason,
            'reference_id': reference_id,
            'created_at': datetime.datetime.utcnow()
        }
        
        self.db.create_points_transaction(transaction_data)
        return True
    
    def get_user_balance(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = self.db.get_user(user_id)
        return user.get('points', 0) if user else 0
    
    def get_user_transactions(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return self.db.get_user_points_transactions(user_id)
    
    def check_stand_visit(self, user_id: int, stand_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Å–µ—â–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ç–µ–Ω–¥ —Ä–∞–Ω–µ–µ."""
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º count_documents() –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ count()
        count = self.db.points_transactions.count_documents({
            'user_id': user_id,
            'reason': 'stand_visit',
            'reference_id': stand_id
        })
        
        return count > 0
    
    def cancel_transaction(self, transaction_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–∞–ª–ª–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = self.db.get_points_transaction(transaction_id)
        if not transaction:
            return False
        
        user_id = transaction.get('user_id')
        amount = transaction.get('amount', 0)
        tx_type = transaction.get('type')
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ, —Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
        points_adjustment = -amount if tx_type == 'earn' else amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ—Ç–º–µ–Ω—è–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ)
        if tx_type == 'earn':
            user = self.db.get_user(user_id)
            if not user or user.get('points', 0) < amount:
                return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.db.update_user_points(user_id, points_adjustment):
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ—Ç–º–µ–Ω—ã
        cancel_reason = f"cancel_{transaction.get('reason', 'other')}"
        transaction_data = {
            'user_id': user_id,
            'amount': amount,
            'type': 'spend' if tx_type == 'earn' else 'earn',
            'reason': cancel_reason,
            'reference_id': transaction_id,
            'created_at': datetime.datetime.utcnow()
        }
        
        self.db.create_points_transaction(transaction_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        return self.db.update_points_transaction_status(transaction_id, 'cancelled')
    
    def get_points_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–ª–ª–∞–º."""
        all_users = self.db.get_all_users()
        all_transactions = list(self.db.points_transactions.find())
        
        total_points_earned = sum(tx.get('amount', 0) for tx in all_transactions if tx.get('type') == 'earn')
        total_points_spent = sum(tx.get('amount', 0) for tx in all_transactions if tx.get('type') == 'spend')
        total_points_balance = sum(user.get('points', 0) for user in all_users)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        earn_reasons = {}
        for tx in all_transactions:
            if tx.get('type') == 'earn':
                reason = tx.get('reason', 'other')
                if reason not in earn_reasons:
                    earn_reasons[reason] = 0
                earn_reasons[reason] += tx.get('amount', 0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º —Å–ø–∏—Å–∞–Ω–∏—è
        spend_reasons = {}
        for tx in all_transactions:
            if tx.get('type') == 'spend':
                reason = tx.get('reason', 'other')
                if reason not in spend_reasons:
                    spend_reasons[reason] = 0
                spend_reasons[reason] += tx.get('amount', 0)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤
        top_users = sorted(all_users, key=lambda x: x.get('points', 0), reverse=True)[:10]
        top_users_data = []
        for user in top_users:
            top_users_data.append({
                'user_id': user.get('user_id'),
                'name': f"{user.get('first_name', '')} {user.get('last_name', '')}",
                'points': user.get('points', 0)
            })
        
        return {
            'total_points_earned': total_points_earned,
            'total_points_spent': total_points_spent,
            'total_points_balance': total_points_balance,
            'earn_reasons': earn_reasons,
            'spend_reasons': spend_reasons,
            'top_users': top_users_data
        }
