#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–ø–∏—Å–∫—É –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

from typing import Dict, List, Optional, Any
import datetime
import uuid
from utils.db_connector import DBConnector

class SubscriptionManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    
    # –¢–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫
    SUBSCRIPTION_TYPES = {
        'announcements': '–ê–Ω–æ–Ω—Å—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è',
        'workshops': '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –∏ –≤–æ—Ä–∫—à–æ–ø—ã',
        'job_offers': '–í–∞–∫–∞–Ω—Å–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
        'merch_updates': '–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ä—á–∞',
        'special_offers': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
    }
    
    def __init__(self, db: DBConnector):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫."""
        self.db = db
    
    def subscribe(self, user_id: int, subscription_type: str) -> bool:
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        if subscription_type not in self.SUBSCRIPTION_TYPES:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        existing = self.db.subscriptions.find_one({
            'user_id': user_id,
            'type': subscription_type
        })
        
        if existing:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
            if not existing.get('is_active', True):
                return self.db.update_subscription(existing.get('subscription_id'), True)
            return True  # –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–Ω–∞
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription_data = {
            'user_id': user_id,
            'type': subscription_type,
            'is_active': True
        }
        
        self.db.create_subscription(subscription_data)
        return True
    
    def unsubscribe(self, user_id: int, subscription_type: str) -> bool:
        """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = self.db.subscriptions.find_one({
            'user_id': user_id,
            'type': subscription_type,
            'is_active': True
        })
        
        if not subscription:
            return False  # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        return self.db.update_subscription(subscription.get('subscription_id'), False)
    
    def get_user_subscriptions(self, user_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        subscriptions = self.db.get_user_subscriptions(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫
        for sub in subscriptions:
            sub_type = sub.get('type')
            sub['type_name'] = self.SUBSCRIPTION_TYPES.get(sub_type, sub_type)
        
        return subscriptions
    
    def get_all_subscription_types(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫."""
        return self.SUBSCRIPTION_TYPES.copy()
    
    def get_subscribers(self, subscription_type: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        if subscription_type not in self.SUBSCRIPTION_TYPES:
            return []
        
        return self.db.get_subscribers_by_type(subscription_type)
    
    def send_notification(self, bot, subscription_type: str, message: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞."""
        if subscription_type not in self.SUBSCRIPTION_TYPES:
            return {'success': False, 'error': 'Invalid subscription type'}
        
        subscribers = self.get_subscribers(subscription_type)
        
        sent_count = 0
        failed_count = 0
        
        for subscriber in subscribers:
            try:
                bot.send_message(
                    chat_id=subscriber.get('user_id'),
                    text=f"üì¢ *{self.SUBSCRIPTION_TYPES.get(subscription_type)}*\n\n{message}",
                    parse_mode='Markdown'
                )
                sent_count += 1
            except Exception as e:
                failed_count += 1
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                self.db.log_error({
                    'user_id': subscriber.get('user_id'),
                    'error_type': 'notification_send_failed',
                    'error_message': str(e),
                    'resolved': False
                })
        
        return {
            'success': True,
            'subscription_type': subscription_type,
            'total_subscribers': len(subscribers),
            'sent_count': sent_count,
            'failed_count': failed_count
        }
