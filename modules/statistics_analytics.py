#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.
"""

from typing import Dict, List, Optional, Any
import datetime
import matplotlib.pyplot as plt
import pandas as pd
import os
from utils.db_connector import DBConnector

class StatisticsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
    
    def __init__(self, db: DBConnector):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.db = db
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs('data/statistics', exist_ok=True)
    
    def get_general_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ—Ç—É."""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = self.db.get_all_users()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        active_users_today = self.db.users.count_documents({
            'last_activity': {'$gte': today}
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        new_registrations_today = self.db.users.count_documents({
            'registered_at': {'$gte': today}
        })
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–µ–Ω–¥–∞–º
        all_stands = self.db.get_all_stands()
        total_stand_visits = sum(stand.get('visits', 0) for stand in all_stands)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ä—á—É
        all_merch_transactions = list(self.db.merch_transactions.find())
        total_merch_orders = len(all_merch_transactions)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–ª–ª–∞–º
        all_points_transactions = list(self.db.points_transactions.find())
        total_points_earned = sum(tx.get('amount', 0) for tx in all_points_transactions if tx.get('type') == 'earn')
        total_points_spent = sum(tx.get('amount', 0) for tx in all_points_transactions if tx.get('type') == 'spend')
        
        return {
            'total_users': len(all_users),
            'active_users_today': active_users_today,
            'new_registrations_today': new_registrations_today,
            'total_stand_visits': total_stand_visits,
            'total_merch_orders': total_merch_orders,
            'total_points_earned': total_points_earned,
            'total_points_spent': total_points_spent,
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX –≤ –æ—Ç—á–µ—Ç–∞—Ö
            'stats_with_emoji': {
                'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': len(all_users),
                'üîÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è': active_users_today,
                '‚ú® –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —Å–µ–≥–æ–¥–Ω—è': new_registrations_today,
                'üè¢ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π —Å—Ç–µ–Ω–¥–æ–≤': total_stand_visits,
                'üõçÔ∏è –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –º–µ—Ä—á–∞': total_merch_orders,
                '‚¨ÜÔ∏è –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤': total_points_earned,
                '‚¨áÔ∏è –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –±–∞–ª–ª–æ–≤': total_points_spent
            }
        }
    
    def get_stand_visitors(self, stand_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å—Ç–µ–Ω–¥–∞."""
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ —ç—Ç–æ–≥–æ —Å—Ç–µ–Ω–¥–∞
        transactions = list(self.db.points_transactions.find({
            'reason': 'stand_visit',
            'reference_id': stand_id
        }).sort('created_at', -1))
        
        visitors = []
        for tx in transactions:
            user_id = tx.get('user_id')
            user = self.db.get_user(user_id)
            
            if user:
                visitors.append({
                    'user_id': user_id,
                    'first_name': user.get('first_name', ''),
                    'last_name': user.get('last_name', ''),
                    'company': user.get('company', ''),
                    'visit_time': tx.get('created_at'),
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
                    'visit_time_display': tx.get('created_at').strftime('%d.%m.%Y %H:%M') if tx.get('created_at') else ''
                })
        
        return visitors
    
    def get_stand_statistics(self, stand_id: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–µ–Ω–¥—É –∏–ª–∏ –≤—Å–µ–º —Å—Ç–µ–Ω–¥–∞–º."""
        if stand_id:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç–µ–Ω–¥—É
            stand = self.db.get_stand(stand_id)
            if not stand:
                return {}
            
            visitors = self.get_stand_visitors(stand_id)
            
            return {
                'stand_id': stand_id,
                'name': stand.get('name', ''),
                'visits': stand.get('visits', 0),
                'visitors': visitors,
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
                'stats_with_emoji': {
                    'üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞': stand.get('name', ''),
                    'üë£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π': stand.get('visits', 0),
                    'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π': len(visitors)
                }
            }
        else:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å—Ç–µ–Ω–¥–∞–º
            all_stands = self.db.get_all_stands()
            
            stands_data = []
            for stand in all_stands:
                stand_id = stand.get('stand_id')
                visitors_count = self.db.points_transactions.count_documents({
                    'reason': 'stand_visit',
                    'reference_id': stand_id
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Å—Ç–µ–Ω–¥–∞
                popularity_emoji = 'üî•' if stand.get('visits', 0) > 20 else ('‚≠ê' if stand.get('visits', 0) > 10 else 'üìä')
                
                stands_data.append({
                    'stand_id': stand_id,
                    'name': stand.get('name', ''),
                    'visits': stand.get('visits', 0),
                    'visitors_count': visitors_count,
                    'popularity': popularity_emoji
                })
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Å–µ—â–µ–Ω–∏–π
            stands_data.sort(key=lambda x: x.get('visits', 0), reverse=True)
            
            return {
                'total_stands': len(all_stands),
                'total_visits': sum(stand.get('visits', 0) for stand in all_stands),
                'stands': stands_data,
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
                'stats_with_emoji': {
                    'üè¢ –í—Å–µ–≥–æ —Å—Ç–µ–Ω–¥–æ–≤': len(all_stands),
                    'üë£ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π': sum(stand.get('visits', 0) for stand in all_stands)
                }
            }
    
    def get_user_activity_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = self.db.get_all_users()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        roles = {}
        for user in all_users:
            role = user.get('role', 'guest')
            if role not in roles:
                roles[role] = 0
            roles[role] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ —Ä–æ–ª—è–º
        roles_with_emoji = {}
        for role, count in roles.items():
            if role == 'admin':
                roles_with_emoji['üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'] = count
            elif role == 'organizer':
                roles_with_emoji['üéØ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä'] = count
            elif role == 'exhibitor':
                roles_with_emoji['üè¢ –≠–∫—Å–ø–æ–Ω–µ–Ω—Ç'] = count
            elif role == 'hr':
                roles_with_emoji['üëî HR'] = count
            elif role == 'participant':
                roles_with_emoji['üë§ –£—á–∞—Å—Ç–Ω–∏–∫'] = count
            else:
                roles_with_emoji['üëã ' + role.capitalize()] = count
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registrations_by_day = {}
        for user in all_users:
            reg_date = user.get('registered_at')
            if reg_date:
                day = reg_date.strftime('%Y-%m-%d')
                if day not in registrations_by_day:
                    registrations_by_day[day] = 0
                registrations_by_day[day] += 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_by_day = {}
        for user in all_users:
            last_activity = user.get('last_activity')
            if last_activity:
                day = last_activity.strftime('%Y-%m-%d')
                if day not in activity_by_day:
                    activity_by_day[day] = 0
                activity_by_day[day] += 1
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        companies = {}
        for user in all_users:
            company = user.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            if company not in companies:
                companies[company] = 0
            companies[company] += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        companies = dict(sorted(companies.items(), key=lambda x: x[1], reverse=True))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∫ —Ç–æ–ø-–∫–æ–º–ø–∞–Ω–∏—è–º
        companies_with_emoji = {}
        for i, (company, count) in enumerate(companies.items()):
            if i < 3:
                emoji = 'ü•á' if i == 0 else ('ü•à' if i == 1 else 'ü•â')
            else:
                emoji = 'üè¢'
            companies_with_emoji[f"{emoji} {company}"] = count
        
        return {
            'total_users': len(all_users),
            'roles': roles,
            'roles_with_emoji': roles_with_emoji,
            'registrations_by_day': registrations_by_day,
            'activity_by_day': activity_by_day,
            'companies': companies,
            'companies_with_emoji': companies_with_emoji,
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX –≤ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            'stats_with_emoji': {
                'üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π': len(all_users),
                'üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞': self.db.users.count_documents({
                    'last_activity': {'$gte': datetime.datetime.utcnow() - datetime.timedelta(hours=24)}
                })
            }
        }
    
    def generate_daily_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
        today = datetime.datetime.utcnow().strftime('%Y-%m-%d')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        general_stats = self.get_general_statistics()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–µ–Ω–¥–∞–º
        stand_stats = self.get_stand_statistics()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = self.get_user_activity_statistics()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = {
            'date': today,
            'general_stats': general_stats,
            'stand_stats': stand_stats,
            'user_stats': user_stats,
            # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
            'report_title': f"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {today}",
            'report_message': f"‚ú® –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∑–∞ {today}."
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.update_daily_statistics(report)
        
        return report
    
    def generate_stand_visits_chart(self, file_path: str = 'data/statistics/stand_visits.png') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å—Ç–µ–Ω–¥–æ–≤."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–µ–Ω–¥–∞–º
        stand_stats = self.get_stand_statistics()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        stands = stand_stats.get('stands', [])
        names = [stand.get('name', '') for stand in stands[:10]]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 —Å—Ç–µ–Ω–¥–æ–≤
        visits = [stand.get('visits', 0) for stand in stands[:10]]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        plt.figure(figsize=(12, 6))
        bars = plt.bar(names, visits, color='#4CAF50')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
        for bar in bars:
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height + 0.3,
                    f'{int(height)}', ha='center', va='bottom')
        
        plt.xlabel('–°—Ç–µ–Ω–¥—ã', fontsize=12)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π', fontsize=12)
        plt.title('üèÜ –¢–æ–ø-10 —Å—Ç–µ–Ω–¥–æ–≤ –ø–æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏', fontsize=14)
        plt.xticks(rotation=45, ha='right')
        plt.grid(axis='y', linestyle='--', alpha=0.7)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig(file_path)
        plt.close()
        
        return file_path
    
    def generate_user_registrations_chart(self, file_path: str = 'data/statistics/user_registrations.png') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–Ω—è–º."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = self.get_user_activity_statistics()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        registrations = user_stats.get('registrations_by_day', {})
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
        dates = sorted(registrations.keys())
        counts = [registrations[date] for date in dates]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        plt.figure(figsize=(12, 6))
        plt.plot(dates, counts, marker='o', color='#2196F3', linewidth=2, markersize=8)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–¥ —Ç–æ—á–∫–∞–º–∏
        for i, count in enumerate(counts):
            plt.text(i, count + 0.5, f'{count}', ha='center')
        
        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π', fontsize=12)
        plt.title('üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', fontsize=14)
        plt.xticks(rotation=45, ha='right')
        plt.grid(linestyle='--', alpha=0.7)
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig(file_path)
        plt.close()
        
        return file_path
    
    def generate_roles_distribution_chart(self, file_path: str = 'data/statistics/roles_distribution.png') -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_stats = self.get_user_activity_statistics()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å —ç–º–æ–¥–∑–∏
        roles = user_stats.get('roles_with_emoji', {})
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        plt.figure(figsize=(10, 10))
        colors = ['#4CAF50', '#2196F3', '#FFC107', '#9C27B0', '#F44336', '#607D8B']
        
        plt.pie(roles.values(), labels=roles.keys(), autopct='%1.1f%%', 
                startangle=90, colors=colors, shadow=True)
        plt.axis('equal')
        plt.title('üë• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º', fontsize=14)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.savefig(file_path)
        plt.close()
        
        return file_path
    
    def export_statistics_to_excel(self, file_path: str = 'data/statistics/statistics_export.xlsx') -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ Excel-—Ñ–∞–π–ª."""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        general_stats = self.get_general_statistics()
        stand_stats = self.get_stand_statistics()
        user_stats = self.get_user_activity_statistics()
        
        # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
        with pd.ExcelWriter(file_path) as writer:
            # –õ–∏—Å—Ç —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å —ç–º–æ–¥–∑–∏)
            general_df = pd.DataFrame({
                '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': general_stats.get('stats_with_emoji', {}).keys(),
                '–ó–Ω–∞—á–µ–Ω–∏–µ': general_stats.get('stats_with_emoji', {}).values()
            })
            general_df.to_excel(writer, sheet_name='–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
            
            # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Å—Ç–µ–Ω–¥–∞–º
            stands_df = pd.DataFrame(stand_stats.get('stands', []))
            if not stands_df.empty:
                stands_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–µ–Ω–¥–æ–≤', index=False)
            
            # –õ–∏—Å—Ç —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Ä–æ–ª—è–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å —ç–º–æ–¥–∑–∏)
            roles_df = pd.DataFrame({
                '–†–æ–ª—å': user_stats.get('roles_with_emoji', {}).keys(),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': user_stats.get('roles_with_emoji', {}).values()
            })
            roles_df.to_excel(writer, sheet_name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π', index=False)
            
            # –õ–∏—Å—Ç —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –ø–æ –¥–Ω—è–º
            registrations_df = pd.DataFrame({
                '–î–∞—Ç–∞': user_stats.get('registrations_by_day', {}).keys(),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': user_stats.get('registrations_by_day', {}).values()
            })
            registrations_df.to_excel(writer, sheet_name='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º', index=False)
            
            # –õ–∏—Å—Ç —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å —ç–º–æ–¥–∑–∏)
            companies_df = pd.DataFrame({
                '–ö–æ–º–ø–∞–Ω–∏—è': user_stats.get('companies_with_emoji', {}).keys(),
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': user_stats.get('companies_with_emoji', {}).values()
            })
            companies_df.to_excel(writer, sheet_name='–ö–æ–º–ø–∞–Ω–∏–∏', index=False)
        
        return file_path
