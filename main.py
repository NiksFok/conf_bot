#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
"""

import os
import logging
import traceback
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, CallbackQueryHandler,
    Filters, CallbackContext, ConversationHandler
)
from pymongo.errors import ConnectionFailure

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from modules.role_management import RoleManager
from modules.merch_module import MerchManager
from modules.points_system import PointsSystem
from modules.candidate_management import CandidateManager
from modules.statistics_analytics import StatisticsManager
from modules.admin_tools import AdminTools
from modules.subscription_feature import SubscriptionManager
from modules.broadcaster import Broadcaster
from utils.qr_generator import QRGenerator
from utils.db_connector import DBConnector

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    REGISTRATION, OCCUPATION, LEVEL, COMPANY, CONSENT,
    ADMIN_MENU, MERCH_MENU, STAND_MENU, HR_MENU, GUEST_MENU
) = range(10)

class ConferenceBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        self.token = os.getenv("TELEGRAM_TOKEN")
        if not self.token:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")
            
        self.admin_code = os.getenv("ADMIN_CODE")
        if not self.admin_code:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –ë–î –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.db = DBConnector()
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            self.db.client.admin.command('ping')
            logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")
        except ConnectionFailure:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
            raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.role_manager = RoleManager(self.db)
        self.merch_manager = MerchManager(self.db)
        self.points_system = PointsSystem(self.db)
        self.candidate_manager = CandidateManager(self.db)
        self.statistics_manager = StatisticsManager(self.db)
        self.admin_tools = AdminTools(self.db, self.admin_code)
        self.subscription_manager = SubscriptionManager(self.db)
        self.broadcaster = Broadcaster(self.db)
        self.qr_generator = QRGenerator()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Updater
        self.updater = Updater(self.token)
        self.dispatcher = self.updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.dispatcher.add_handler(CommandHandler("start", self.start))
        self.dispatcher.add_handler(CommandHandler("help", self.help_command))
        self.dispatcher.add_handler(CommandHandler("admin", self.admin_command))
        self.dispatcher.add_handler(CommandHandler("test", self.test_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registration_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.registration_start, pattern='^register$')],
            states={
                REGISTRATION: [MessageHandler(Filters.text & ~Filters.command, self.registration_name)],
                OCCUPATION: [MessageHandler(Filters.text & ~Filters.command, self.registration_occupation)],
                LEVEL: [CallbackQueryHandler(self.registration_level, pattern='^level_')],
                COMPANY: [MessageHandler(Filters.text & ~Filters.command, self.registration_company)],
                CONSENT: [CallbackQueryHandler(self.registration_consent, pattern='^consent_')]
            },
            fallbacks=[CommandHandler("cancel", self.cancel_registration)]
        )
        self.dispatcher.add_handler(registration_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
        self.dispatcher.add_handler(CallbackQueryHandler(self.handle_menu_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤
        self.dispatcher.add_handler(MessageHandler(Filters.photo, self.handle_photo))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.dispatcher.add_handler(MessageHandler(Filters.command, self.unknown_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.dispatcher.add_error_handler(self.error_handler)
    
    def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            role = user.get('role', 'guest')
            self._show_role_menu(update, context, role)
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            keyboard = [
                [InlineKeyboardButton("‚ú® –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚ú®", callback_data="register")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –¢-–ë–∞–Ω–∫–∞ –Ω–∞ Aha'25! üéâ\n\n"
                "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º. "
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                reply_markup=reply_markup
            )
    
    def help_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            update.message.reply_text(
                "üîç –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. "
                "–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É! üòä"
            )
            return
        
        role = user.get('role', 'guest')
        help_text = self._get_help_text(role)
        
        update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    def test_command(self, update: Update, context: CallbackContext):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
        logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /test")
        update.message.reply_text("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏! üöÄ")
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    def admin_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin."""
        update.message.reply_text(
            "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        return ADMIN_MENU
    
    def registration_start(self, update: Update, context: CallbackContext):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        query = update.callback_query
        query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if user:
            role = user.get('role', 'guest')
            query.edit_message_text(
                f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {self.role_manager.get_role_name(role)}. "
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
            )
            self._show_role_menu(update, context, role)
            return ConversationHandler.END
        
        query.edit_message_text(
            "üë§ –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:"
        )
        return REGISTRATION
    
    def registration_name(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏."""
        full_name = update.message.text.strip()
        if len(full_name.split()) < 2:
            update.message.reply_text(
                "üôè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏ –∏–º—è, –∏ —Ñ–∞–º–∏–ª–∏—é, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º: "
            )
            return REGISTRATION
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        name_parts = full_name.split(maxsplit=1)
        context.user_data['first_name'] = name_parts[0]
        context.user_data['last_name'] = name_parts[1]
        
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–æ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è: {full_name}")
        
        update.message.reply_text(
            f"üëç –û—Ç–ª–∏—á–Ω–æ, {name_parts[0]}! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:"
        )
        return OCCUPATION
    
    def registration_occupation(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏."""
        occupation = update.message.text.strip()
        context.user_data['occupation'] = occupation
        
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {occupation}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
        keyboard = [
            [InlineKeyboardButton("üå± Junior", callback_data="level_junior")],
            [InlineKeyboardButton("üåø Middle", callback_data="level_middle")],
            [InlineKeyboardButton("üå≤ Senior", callback_data="level_senior")],
            [InlineKeyboardButton("üå≥ Lead", callback_data="level_lead")],
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ", callback_data="level_other")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:",
            reply_markup=reply_markup
        )
        return LEVEL
    
    def registration_level(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è."""
        query = update.callback_query
        query.answer()
        
        level = query.data.replace("level_", "")
        context.user_data['level'] = level
        
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: –≤—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {level}")
        
        query.edit_message_text(
            "üè¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:"
        )
        return COMPANY
    
    def registration_company(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏."""
        company = update.message.text.strip()
        context.user_data['company'] = company
        
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data="consent_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(
            "üìù –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=reply_markup
        )
        return CONSENT
    
    def registration_consent(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö."""
        query = update.callback_query
        query.answer()
        
        if query.data == "consent_no":
            query.edit_message_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞. "
                "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
                "–õ–∏–±–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –∫ —Å—Ç–æ–π–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –±—É–º–∞–∂–Ω—ã–π –±–ª–∞–Ω–∫ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –Ω–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö"
            )
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_data = {
            'user_id': update.effective_user.id,
            'first_name': context.user_data.get('first_name'),
            'last_name': context.user_data.get('last_name'),
            'username': update.effective_user.username,
            'occupation': context.user_data.get('occupation'),
            'level': context.user_data.get('level'),
            'company': context.user_data.get('company'),
            'role': 'guest',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–æ–ª—å "–≥–æ—Å—Ç—å"
            'points': 0,
            'consent': True,
            'is_blocked': False,
            'is_candidate': False,
            'registration_date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        try:
            self.db.create_user(user_data)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            self.points_system.add_points(
                update.effective_user.id, 
                10, 
                'registration', 
                f"reg_{update.effective_user.id}"
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            qr_path = self.qr_generator.generate_user_qr(update.effective_user.id)
            
            query.edit_message_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n\n"
                f"–í–∞—à–∞ —Ä–æ–ª—å: ‚ú® –ì–æ—Å—Ç—å ‚ú®\n\n"
                f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã "
                f"–∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–æ–≤ –∏ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(qr_path, 'rb') as qr_file:
                context.bot.send_photo(
                    chat_id=update.effective_user.id,
                    photo=qr_file,
                    caption="üîë –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥. –ü–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å—Ç–µ–Ω–¥–∏—Å—Ç–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≥–æ—Å—Ç—è
            self._show_guest_menu(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            query.edit_message_text(
                "üòì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–±—è—Ç–∞–º –Ω–∞ —Å—Ç–µ–Ω–¥–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ª–∞ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¢."
            )
        
        return ConversationHandler.END
    
    def cancel_registration(self, update: Update, context: CallbackContext):
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
        update.message.reply_text(
            "üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è."
        )
        return ConversationHandler.END
    
    def handle_menu_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
        query = update.callback_query
        query.answer()
        
        callback_data = query.data
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            query.edit_message_text(
                "üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.get('is_blocked', False):
            query.edit_message_text(
                "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ niksfok –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback_data –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role = user.get('role', 'guest')
        
        # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        if callback_data == "main_menu":
            self._show_role_menu(update, context, role)
            return
        
        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≥–æ—Å—Ç–µ–π
        if role == 'guest':
            if callback_data == "view_merch":
                self._show_merch_catalog(update, context)
            elif callback_data == "view_points":
                self._show_points_balance(update, context)
            elif callback_data == "view_stands":
                self._show_stands_list(update, context)
            elif callback_data.startswith("order_merch_"):
                merch_id = callback_data.replace("order_merch_", "")
                self._order_merch(update, context, merch_id)
            elif callback_data == "view_program":
                self._show_program(update, context)
            elif callback_data == "subscribe":
                self._show_subscription_options(update, context)
            elif callback_data.startswith("subscribe_to_"):
                subscription_type = callback_data.replace("subscribe_to_", "")
                self._subscribe_to(update, context, subscription_type)
            elif callback_data.startswith("unsubscribe_from_"):
                subscription_type = callback_data.replace("unsubscribe_from_", "")
                self._unsubscribe_from(update, context, subscription_type)
            elif callback_data.startswith("view_stand_"):
                stand_id = callback_data.replace("view_stand_", "")
                self._show_stand_details(update, context, stand_id)
        
        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–µ–Ω–¥–∏—Å—Ç–æ–≤
        elif role == 'standist':
            if callback_data == "scan_qr":
                self._prompt_qr_scan(update, context)
            elif callback_data == "view_stand_stats":
                self._show_stand_statistics(update, context)
            elif callback_data == "view_my_stand":
                self._show_my_stand(update, context)
            elif callback_data == "view_points":
                self._show_points_balance(update, context)
            elif callback_data == "view_merch":
                self._show_merch_catalog(update, context)
            elif callback_data.startswith("order_merch_"):
                merch_id = callback_data.replace("order_merch_", "")
                self._order_merch(update, context, merch_id)
            elif callback_data == "edit_stand":
                self._edit_stand_prompt(update, context)
            elif callback_data == "view_visitors":
                self._show_stand_visitors(update, context)
        
        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è HR
        elif role == 'hr':
            if callback_data == "mark_candidate":
                self._prompt_candidate_scan(update, context)
            elif callback_data == "view_candidates":
                self._show_candidates_list(update, context)
            elif callback_data == "export_candidates":
                self._export_candidates(update, context)
            elif callback_data == "view_points":
                self._show_points_balance(update, context)
            elif callback_data == "view_merch":
                self._show_merch_catalog(update, context)
            elif callback_data.startswith("order_merch_"):
                merch_id = callback_data.replace("order_merch_", "")
                self._order_merch(update, context, merch_id)
            elif callback_data.startswith("view_candidate_"):
                candidate_id = callback_data.replace("view_candidate_", "")
                self._show_candidate_details(update, context, candidate_id)
            elif callback_data.startswith("add_note_"):
                candidate_id = callback_data.replace("add_note_", "")
                self._prompt_candidate_note(update, context, candidate_id)
        
        # –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        elif role == 'admin':
            if callback_data == "manage_users":
                self._show_users_management(update, context)
            elif callback_data == "manage_stands":
                self._show_stands_management(update, context)
            elif callback_data == "manage_merch":
                self._show_merch_management(update, context)
            elif callback_data == "view_statistics":
                self._show_statistics(update, context)
            elif callback_data == "broadcast_message":
                self._prompt_broadcast_message(update, context)
            elif callback_data == "confirm_broadcast":
                self._confirm_broadcast(update, context)
            elif callback_data == "cancel_broadcast":
                self._cancel_broadcast(update, context)
            elif callback_data.startswith("change_role_"):
                parts = callback_data.replace("change_role_", "").split("_")
                user_id = int(parts[0])
                new_role = parts[1]
                self._change_user_role(update, context, user_id, new_role)
            elif callback_data.startswith("block_user_"):
                user_id = int(callback_data.replace("block_user_", ""))
                self._block_user(update, context, user_id)
            elif callback_data.startswith("unblock_user_"):
                user_id = int(callback_data.replace("unblock_user_", ""))
                self._unblock_user(update, context, user_id)
            elif callback_data.startswith("delete_user_"):
                user_id = int(callback_data.replace("delete_user_", ""))
                self._delete_user(update, context, user_id)
            elif callback_data == "add_stand":
                self._add_stand_prompt(update, context)
            elif callback_data.startswith("edit_stand_"):
                stand_id = callback_data.replace("edit_stand_", "")
                self._edit_stand_prompt(update, context, stand_id)
            elif callback_data.startswith("delete_stand_"):
                stand_id = callback_data.replace("delete_stand_", "")
                self._delete_stand(update, context, stand_id)
            elif callback_data == "add_merch":
                self._add_merch_prompt(update, context)
            elif callback_data.startswith("edit_merch_"):
                merch_id = callback_data.replace("edit_merch_", "")
                self._edit_merch_prompt(update, context, merch_id)
            elif callback_data.startswith("delete_merch_"):
                merch_id = callback_data.replace("delete_merch_", "")
                self._delete_merch(update, context, merch_id)
    
    def handle_photo(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤)."""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            update.message.reply_text(
                "üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.get('is_blocked', False):
            update.message.reply_text(
                "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        role = user.get('role', 'guest')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.update_user(user_id, {'last_activity': datetime.now().strftime('%Y-%m-%d %H:%M:%S')})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–ª—É—á—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        photo_file = update.message.photo[-1].get_file()
        photo_path = f"temp/{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.jpg"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(photo_path), exist_ok=True)
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_file.download(photo_path)
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º QR-–∫–æ–¥
            qr_data = self.qr_generator.scan_qr_code(photo_path)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(photo_path)
            
            if not qr_data:
                update.message.reply_text(
                    "üîç QR-–∫–æ–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR-–∫–æ–¥ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
            
            logger.info(f"–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω QR-–∫–æ–¥: {qr_data}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if role == 'standist':
                # –°—Ç–µ–Ω–¥–∏—Å—Ç —Å–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
                try:
                    scanned_user_id = int(qr_data)
                    scanned_user = self.db.get_user(scanned_user_id)
                    
                    if not scanned_user:
                        update.message.reply_text(
                            "‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
                        )
                        return
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–µ–Ω–¥ —Å—Ç–µ–Ω–¥–∏—Å—Ç–∞
                    stand = self.db.get_stand_by_owner(user_id)
                    
                    if not stand:
                        update.message.reply_text(
                            "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )
                        return
                    
                    stand_id = stand.get('stand_id')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Å–µ—â–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç —Å—Ç–µ–Ω–¥ —Ä–∞–Ω–µ–µ
                    if self.points_system.check_stand_visit(scanned_user_id, stand_id):
                        update.message.reply_text(
                            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {scanned_user.get('first_name')} {scanned_user.get('last_name')} "
                            f"—É–∂–µ –ø–æ—Å–µ—â–∞–ª –≤–∞—à —Å—Ç–µ–Ω–¥ –∏ –ø–æ–ª—É—á–∏–ª –±–∞–ª–ª—ã —Ä–∞–Ω–µ–µ."
                        )
                        return
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞
                    points = stand.get('points_reward', 10)
                    if self.points_system.add_points(scanned_user_id, points, 'stand_visit', stand_id):
                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–µ—â–µ–Ω–∏–π —Å—Ç–µ–Ω–¥–∞
                        self.db.increment_stand_visits(stand_id)
                        
                        update.message.reply_text(
                            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {scanned_user.get('first_name')} {scanned_user.get('last_name')} "
                            f"—É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å—Ç–µ–Ω–¥–∞!"
                        )
                    else:
                        update.message.reply_text(
                            "üòì –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )

                    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏
                    if self.candidate_manager.mark_as_candidate(scanned_user_id, user_id):
                        update.message.reply_text(
                            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {scanned_user.get('first_name')} {scanned_user.get('last_name')} "
                            f"—É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç"
                        )
                        
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
                        keyboard = [
                            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{scanned_user_id}")],
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        update.message.reply_text(
                            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ –≥–æ—Å—Ç–µ?",
                            reply_markup=reply_markup
                        )
                    else:
                        update.message.reply_text(
                            "üòì –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                        )
                
                except ValueError:
                    update.message.reply_text(
                        "‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π QR-–∫–æ–¥. QR-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
            
            elif role == 'hr':
                # HR —Å–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏
                try:
                    scanned_user_id = int(qr_data)
                    scanned_user = self.db.get_user(scanned_user_id)
                    
                    if not scanned_user:
                        update.message.reply_text(
                            "‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
                        )
                        return
                    
                    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                    if self.candidate_manager.mark_as_candidate(scanned_user_id, user_id):
                        update.message.reply_text(
                            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {scanned_user.get('first_name')} {scanned_user.get('last_name')} "
                            f"—É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç."
                        )
                        
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
                        keyboard = [
                            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{scanned_user_id}")],
                            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        update.message.reply_text(
                            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ?",
                            reply_markup=reply_markup
                        )
                    else:
                        update.message.reply_text(
                            "üòì –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                        )
                
                except ValueError:
                    update.message.reply_text(
                        "‚ö†Ô∏è –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π QR-–∫–æ–¥. QR-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                    )
            
            else:
                # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–Ω–∏—Ä—É–µ—Ç QR-–∫–æ–¥
                if qr_data.startswith("stand:"):
                    # QR-–∫–æ–¥ —Å—Ç–µ–Ω–¥–∞
                    stand_id = qr_data.replace("stand:", "")
                    stand = self.db.get_stand(stand_id)
                    
                    if not stand:
                        update.message.reply_text(
                            "‚ùì –°—Ç–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª."
                        )
                        return
                    
                    update.message.reply_text(
                        f"üéØ –í—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ QR-–∫–æ–¥ —Å—Ç–µ–Ω–¥–∞: {stand.get('name')}\n\n"
                        f"{stand.get('description')}\n\n"
                        f"üì± –ü–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π QR-–∫–æ–¥ —Å—Ç–µ–Ω–¥–∏—Å—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤!"
                    )
                
                elif qr_data.startswith("merch:"):
                    # QR-–∫–æ–¥ –º–µ—Ä—á–∞
                    merch_id = qr_data.replace("merch:", "")
                    merch = self.db.get_merch(merch_id)
                    
                    if not merch:
                        update.message.reply_text(
                            "‚ùì –ú–µ—Ä—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª."
                        )
                        return
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä—á–µ
                    keyboard = [
                        [InlineKeyboardButton("üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_merch_{merch_id}")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    update.message.reply_text(
                        f"üéÅ –í—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ QR-–∫–æ–¥ –º–µ—Ä—á–∞: {merch.get('name')}\n\n"
                        f"{merch.get('description')}\n\n"
                        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {merch.get('points_cost')} –±–∞–ª–ª–æ–≤\n"
                        f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å: {merch.get('quantity_left')} —à—Ç.",
                        reply_markup=reply_markup
                    )
                
                elif qr_data.startswith("event:"):
                    # QR-–∫–æ–¥ —Å–æ–±—ã—Ç–∏—è
                    event_id = qr_data.replace("event:", "")
                    event = self.db.get_event(event_id)
                    
                    if not event:
                        update.message.reply_text(
                            "‚ùì –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, QR-–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª."
                        )
                        return
                    
                    update.message.reply_text(
                        f"üìÖ –í—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ QR-–∫–æ–¥ —Å–æ–±—ã—Ç–∏—è: {event.get('name')}\n\n"
                        f"{event.get('description')}\n\n"
                        f"‚è∞ –í—Ä–µ–º—è: {event.get('start_time')} - {event.get('end_time')}\n"
                        f"üìç –ú–µ—Å—Ç–æ: {event.get('location')}"
                    )
                
                else:
                    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞
                    update.message.reply_text(
                        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π QR-–∫–æ–¥"
                    )
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            update.message.reply_text(
                "üòì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
            )
    
    def handle_message(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            update.message.reply_text(
                "üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.get('is_blocked', False):
            update.message.reply_text(
                "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.update_user(user_id, {'last_activity': datetime.now().strftime('%Y-%m-%d %H:%M:%S')})
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if context.user_data.get('state') == 'waiting_broadcast_text':
            # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            broadcast_text = update.message.text
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = [
                [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            context.user_data['broadcast_text'] = broadcast_text
            
            update.message.reply_text(
                f"üì¢ –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{broadcast_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
                reply_markup=reply_markup
            )
            
            context.user_data['state'] = 'waiting_broadcast_confirmation'
        
        elif context.user_data.get('state') == 'waiting_candidate_note':
            # HR –≤–≤–æ–¥–∏—Ç –∑–∞–º–µ—Ç–∫—É –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
            note_text = update.message.text
            candidate_id = context.user_data.get('candidate_id')
            
            if not candidate_id:
                update.message.reply_text(
                    "üòì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
            if self.candidate_manager.add_note(int(candidate_id), user_id, note_text):
                update.message.reply_text(
                    "‚úÖ –ó–∞–º–µ—Ç–∫–∞ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
                )
            else:
                update.message.reply_text(
                    "üòì –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ."
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('state', None)
            context.user_data.pop('candidate_id', None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é HR
            self._show_role_menu(update, context, 'hr')
        
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            role = user.get('role', 'guest')
            self._show_role_menu(update, context, role)
    
    def unknown_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
        update.message.reply_text(
            "ü§î –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
    
    def error_handler(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        error_data = {
            'error_message': str(context.error),
            'traceback': traceback.format_exc(),
            'update': update.to_dict() if update else None
        }
        
        self.db.log_error(error_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_chat:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üòì –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–±–æ–ª—å—à–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–º–∏–Ω–∫–∞. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    def _show_role_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            if update.callback_query:
                update.callback_query.edit_message_text(
                    "üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
                )
            else:
                update.message.reply_text(
                    "üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
                )
            return
        
        role = user.get('role', 'guest')
        
        if role == 'guest':
            self._show_guest_menu(update, context)
        elif role == 'standist':
            self._show_standist_menu(update, context)
        elif role == 'hr':
            self._show_hr_menu(update, context)
        elif role == 'admin':
            self._show_admin_menu(update, context)
    
    def _show_guest_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≥–æ—Å—Ç—è."""
        keyboard = [
            [InlineKeyboardButton("üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", callback_data="view_program")],
            [InlineKeyboardButton("üí∞ –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="view_points")],
            # [InlineKeyboardButton("üéÅ –ö–∞—Ç–∞–ª–æ–≥ –º–µ—Ä—á–∞", callback_data="view_merch")],
            [InlineKeyboardButton("üè¢ –°–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤", callback_data="view_stands")],
            [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", callback_data="subscribe")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥–æ—Å—Ç—è –∑–∞–ª–∞ –¢-–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
        
        if update.callback_query:
            update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
        else:
            update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup
            )
    
    def _show_standist_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–µ–Ω–¥–∏—Å—Ç–∞."""
        keyboard = [
            [InlineKeyboardButton("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥", callback_data="scan_qr")],
            [InlineKeyboardButton("üë§ –û—Ç–º–µ—Ç–∏—Ç—å –≥–æ—Å—Ç—è", callback_data="mark_candidate")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–µ–Ω–¥–∞", callback_data="view_stand_stats")],
            [InlineKeyboardButton("üè¢ –ú–æ–π —Å—Ç–µ–Ω–¥", callback_data="view_my_stand")]
            #[InlineKeyboardButton("üí∞ –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="view_points")],
            #[InlineKeyboardButton("üéÅ –ö–∞—Ç–∞–ª–æ–≥ –º–µ—Ä—á–∞", callback_data="view_merch")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–µ–Ω–¥–∏—Å—Ç–∞ üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
        
        if update.callback_query:
            update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
        else:
            update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup
            )
    
    def _show_hr_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é HR."""
        keyboard = [
            [InlineKeyboardButton("üë§ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", callback_data="mark_candidate")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤", callback_data="view_candidates")]
            # [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export_candidates")],
            # [InlineKeyboardButton("üí∞ –ú–æ–∏ –±–∞–ª–ª—ã", callback_data="view_points")],
            # [InlineKeyboardButton("üéÅ –ö–∞—Ç–∞–ª–æ–≥ –º–µ—Ä—á–∞", callback_data="view_merch")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:"
        
        if update.callback_query:
            update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
        else:
            update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup
            )
    
    def _show_admin_menu(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        keyboard = [
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")],
            [InlineKeyboardButton("üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞–º–∏", callback_data="manage_stands")],
            [InlineKeyboardButton("üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä—á–µ–º", callback_data="manage_merch")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="view_statistics")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="broadcast_message")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = "üåü –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        
        if update.callback_query:
            update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup
            )
        else:
            update.message.reply_text(
                text=message_text,
                reply_markup=reply_markup
            )
    
    def _get_help_text(self, role):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if role == 'guest':
            return (
                "üåü *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* üåü\n\n"
                "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *–ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –¢-–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏*.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
                "‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ª–∞\n"
                "‚Ä¢ üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –±–∞–ª–ª–æ–≤\n"
                "‚Ä¢ üè¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–µ–Ω–¥–∞—Ö\n"
                "‚Ä¢ üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
                "–ö–∞–∫ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã:\n"
                "‚Ä¢ ‚úÖ –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±–æ—Ç–µ\n"
                "‚Ä¢ üìù –ó–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö (–ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π QR-–∫–æ–¥ —Å—Ç–µ–Ω–¥–∏—Å—Ç—É)\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–æ–π–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É –≤—Ö–æ–¥–∞ –≤ –Ω–∞—à –∑–∞–ª"
            )
        elif role == 'standist':
            return (
                "üåü *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* üåü\n\n"
                "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *–°—Ç–µ–Ω–¥–∏—Å—Ç*.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
                "‚Ä¢ üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤\n"
                "‚Ä¢ üë§ –û—Ç–º–µ—á–∞–π—Ç–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–±—è—Ç\n"
                "‚Ä¢ üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö\n"
                "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π –≤–∞—à–µ–≥–æ —Å—Ç–µ–Ω–¥–∞\n"
                "‚Ä¢ üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—à–µ–º —Å—Ç–µ–Ω–¥–µ\n\n"
                "–ö–∞–∫ –Ω–∞—á–∏—Å–ª—è—Ç—å –±–∞–ª–ª—ã –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º:\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥'\n"
                "2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è\n"
                "3. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–ª–ª–æ–≤, –≥–¥–µ 1 –Ω–∞–∫–ª–µ–π–∫–∞ = 10 –±–∞–ª–ª–æ–≤\n"
                "3. –ë–∞–ª–ª—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É - niksfok"
            )
        elif role == 'hr':
            return (
                "üåü *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* üåü\n\n"
                "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç*.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
                "‚Ä¢ üë§ –û—Ç–º–µ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
                "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤\n"
                "‚Ä¢ üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö\n"
                "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö\n"
                "‚Ä¢ üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –±–∞–ª–ª–æ–≤\n"
                "‚Ä¢ üéÅ –ó–∞–∫–∞–∑ –º–µ—Ä—á–∞ –∑–∞ –±–∞–ª–ª—ã\n\n"
                "–ö–∞–∫ –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:\n"
                "1. –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞'\n"
                "2. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫—É –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É - niksfok"
            )
        elif role == 'admin':
            return (
                "üåü *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* üåü\n\n"
                "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä*.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
                "‚Ä¢ /admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
                "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞)\n"
                "‚Ä¢ üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)\n"
                "‚Ä¢ üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä—á–µ–º (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ)\n"
                "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n"
                "‚Ä¢ üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –º–æ–ª–∏—Å—å)))"
            )
        else:
            return (
                "üåü *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞* üåü\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç–æ–π–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É –≤—Ö–æ–¥–∞ –≤ –Ω–∞—à –∑–∞–ª"
            )
    
    def run_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling."""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.updater.start_polling()
        self.updater.idle()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    try:
        bot = ConferenceBot()
        bot.run_bot()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
